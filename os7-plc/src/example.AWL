TYPE "POINTER"
VERSION : 0.1


  STRUCT 	
   DBNO : INT ;	
   START : DINT ;	
   LENGTH : INT ;	
  END_STRUCT ;	
END_TYPE

TYPE "BOOLEAN_INPUT"


  STRUCT 	
   P : "POINTER";	
   VALUE : BOOL ;	
   OLD_VALUE : BOOL ;	
   ON_VALUE_CHANGED : BOOL ;	
   ON_POSITIVE_EDGE : BOOL ;	
   ON_NEGATIVE_EDGE : BOOL ;	
  END_STRUCT ;	
END_TYPE

TYPE "BOOLEAN_OUTPUT"


  STRUCT 	
   P : "POINTER";	
   VALUE : BOOL ;	
  END_STRUCT ;	
END_TYPE

TYPE "ACTUATOR"
VERSION : 0.1


  STRUCT 	
   P : "POINTER";	
   P_I : "POINTER";	
   INTERLOCK : BOOL ;	
   MODE : WORD ;	//enum Mode: 0 - UNDEFINED, 1 - FORWARD, 2 - BACKWARD, 3 - STOP
  END_STRUCT ;	
END_TYPE

TYPE "EXAMPLE_ACTUATOR_INTERFA"
VERSION : 0.1


  STRUCT 	
   P : "POINTER";	
   MIN_POSITION : "BOOLEAN_INPUT";	//private BooleanInput minPosition;
   MAX_POSITION : "BOOLEAN_INPUT";	//private BooleanInput maxPosition;
   FORWARD_MOVEMENT : "BOOLEAN_OUTPUT";	//private BooleanOutput forwardMovement;
   BACKWARD_MOVEMENT : "BOOLEAN_OUTPUT";	//private BooleanOutput backwardMovement;
   MOVEMENT_LOCKED : "BOOLEAN_INPUT";	//private BooleanInput movementLocked;
  END_STRUCT ;	
END_TYPE

TYPE "EXAMPLE_CONTROL_DESK_INT"
VERSION : 0.1


  STRUCT 	
   P : "POINTER";	
   FORWARD_BUTTON : "BOOLEAN_INPUT";	//private BooleanInput forwardButton;
   BACKWARD_BUTTON : "BOOLEAN_INPUT";	//private BooleanInput backwardButton;
   STOP_BUTTON : "BOOLEAN_INPUT";	//private BooleanInput stopButton;
  END_STRUCT ;	
END_TYPE

TYPE "ACTUATOR_CONTROLLER"
VERSION : 0.1


  STRUCT 	
   P : "POINTER";	
   P_EXAMPLE_ACTUATOR_INTER : "POINTER";	
   P_EXAMPLE_CONTROL_DESK_I : "POINTER";	
   ACTUATOR : "ACTUATOR";	
  END_STRUCT ;	
END_TYPE

TYPE "ACTUATOR_INTERFACE"
VERSION : 0.1


  STRUCT 	
   P : "POINTER";	
   MIN_POSITION : "BOOLEAN_INPUT";	//private BooleanInput minPosition;
   MAX_POSITION : "BOOLEAN_INPUT";	//private BooleanInput maxPosition;
   FORWARD_MOVEMENT : "BOOLEAN_OUTPUT";	//private BooleanOutput forwardMovement;
   BACKWARD_MOVEMENT : "BOOLEAN_OUTPUT";	//private BooleanOutput backwardMovement;
  END_STRUCT ;	
END_TYPE

DATA_BLOCK "INTERFACES"
TITLE =
VERSION : 0.1
NON_RETAIN


  STRUCT 	
   EXAMPLE_ACTUATOR_INTERFA : "EXAMPLE_ACTUATOR_INTERFA";	//@Interface("exampleActuatorInterface")
   EXAMPLE_CONTROL_DESK_INT : "EXAMPLE_CONTROL_DESK_INT";	//@Interface("exampleControlDeskInterface")
  END_STRUCT ;	
BEGIN
   EXAMPLE_ACTUATOR_INTERFA.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.OLD_VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.ON_NEGATIVE_EDGE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.OLD_VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.ON_NEGATIVE_EDGE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.P.DBNO := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.P.START := L#0; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.P.LENGTH := 0; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.OLD_VALUE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.ON_NEGATIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.P.DBNO := 0; 
   EXAMPLE_CONTROL_DESK_INT.P.START := L#0; 
   EXAMPLE_CONTROL_DESK_INT.P.LENGTH := 0; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.P.DBNO := 0; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.P.START := L#0; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.P.LENGTH := 0; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.OLD_VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.ON_NEGATIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.P.DBNO := 0; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.P.START := L#0; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.P.LENGTH := 0; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.OLD_VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.ON_NEGATIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.P.DBNO := 0; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.P.START := L#0; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.P.LENGTH := 0; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.OLD_VALUE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.ON_VALUE_CHANGED := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.ON_POSITIVE_EDGE := FALSE; 
   EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.ON_NEGATIVE_EDGE := FALSE; 
END_DATA_BLOCK

DATA_BLOCK "CONTROLLERS"
TITLE =
VERSION : 0.1
NON_RETAIN


  STRUCT 	
   ACTUATOR_CONTROLLER : "ACTUATOR_CONTROLLER";	//@Controller("actuatorController")
  END_STRUCT ;	
BEGIN
   ACTUATOR_CONTROLLER.P.DBNO := 0; 
   ACTUATOR_CONTROLLER.P.START := L#0; 
   ACTUATOR_CONTROLLER.P.LENGTH := 0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.DBNO := 0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.START := L#0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.LENGTH := 0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_CONTROL_DESK_I.DBNO := 0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_CONTROL_DESK_I.START := L#0; 
   ACTUATOR_CONTROLLER.P_EXAMPLE_CONTROL_DESK_I.LENGTH := 0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P.DBNO := 0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P.START := L#0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P.LENGTH := 0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P_I.DBNO := 0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P_I.START := L#0; 
   ACTUATOR_CONTROLLER.ACTUATOR.P_I.LENGTH := 0; 
   ACTUATOR_CONTROLLER.ACTUATOR.INTERLOCK := FALSE; 
   ACTUATOR_CONTROLLER.ACTUATOR.MODE := W#16#64; 
END_DATA_BLOCK

FUNCTION "BOOLEAN_INPUT_GET" : BOOL
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "BOOLEAN_OUTPUT";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//return this.value;
      A     #_THIS.VALUE; 
      =     #RET_VAL; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "BOOLEAN_OUTPUT_SET" : VOID
TITLE =
VERSION : 0.1


VAR_INPUT
  VALUE : BOOL ;	
END_VAR
VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "BOOLEAN_OUTPUT";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//this.value = value
      A     #VALUE; 
      =     #_THIS.VALUE; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "ACTUATOR_MOVE_FORWARD" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//mode = Mode.FORWARD;
      L     1; 
      T     #_THIS.MODE; 
NETWORK
TITLE =EXPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "ACTUATOR_MOVE_BACKWARD" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//mode = Mode.BACKWARD;
      L     2; 
      T     #_THIS.MODE; 
NETWORK
TITLE =EXPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "ACTUATOR_STOP" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//mode = Mode.STOP;
      L     3; 
      T     #_THIS.MODE; 
NETWORK
TITLE =EXPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "ACTUATOR_HANDLE_ACT_MODE" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _P_I : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _I : "EXAMPLE_ACTUATOR_INTERFA";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
  _T1 : BOOL ;	
  _T2 : BOOL ;	
  _T3 : BOOL ;	
  _T4 : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =GET ANY POINTER

      L     #_THIS.P_I.DBNO; 
      T     #_DBNO; 
      L     #_THIS.P_I.START; 
      T     #_START; 
      L     #_THIS.P_I.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_I; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_I,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_I);

NETWORK
TITLE =IMPL
//case FORWARD:
      L     #_THIS.MODE; 
      L     1; 
      ==I   ; 
      JCN   END1; 

//case FORWARD:

      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T1,
           P                        := #_I.MAX_POSITION.P);

      AN    #_T1; 
      AN    #_THIS.INTERLOCK; 
      =     #_T2; 

      CALL "BOOLEAN_OUTPUT_SET" (
           VALUE                    := #_T2,
           P                        := #_I.FORWARD_MOVEMENT.P);

      JU    END; 

END1: CLR   ; 

      L     #_THIS.MODE; 
      L     2; 
      ==I   ; 
      JCN   END2; 

//case BACKWARD:

      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T3,
           P                        := #_I.MIN_POSITION.P);

      AN    #_T3; 
      AN    #_THIS.INTERLOCK; 
      =     #_T4; 

      CALL "BOOLEAN_OUTPUT_SET" (
           VALUE                    := #_T4,
           P                        := #_I.BACKWARD_MOVEMENT.P);

      JU    END; 

END2: CLR   ; 

//default:

END:  CLR   ; 
END_FUNCTION

FUNCTION "ACTUATOR_SET_INTERLOCK" : VOID
TITLE =
VERSION : 0.1


VAR_INPUT
  INTERLOCK : BOOL ;	
END_VAR
VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//@Setter private boolean interlock;
      A     #INTERLOCK; 
      =     #_THIS.INTERLOCK; 
NETWORK
TITLE =EXPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "POINTER_CREATE" : VOID
TITLE =
VERSION : 0.1


VAR_INPUT
  DBNO : INT ;	
  START : DINT ;	
  LENGTH : INT ;	
END_VAR
VAR_IN_OUT
  P : "POINTER";	
END_VAR
BEGIN
NETWORK
TITLE =IMPL

      L     #DBNO; 
      T     #P.DBNO; 
      L     #START; 
      T     #P.START; 
      L     #LENGTH; 
      T     #P.LENGTH; 
END_FUNCTION

FUNCTION "ACTUATOR_HANDLE_ACT_MOVE" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _P_I : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _I : "EXAMPLE_ACTUATOR_INTERFA";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =GET ANY POINTER

      L     #_THIS.P_I.DBNO; 
      T     #_DBNO; 
      L     #_THIS.P_I.START; 
      T     #_START; 
      L     #_THIS.P_I.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_I; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_I,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_I);

NETWORK
TITLE =IMPL
//i.getForwardMovement().set(false);
      CALL "BOOLEAN_OUTPUT_SET" (
           VALUE                    := FALSE,
           P                        := #_I.FORWARD_MOVEMENT.P);

NETWORK
TITLE =IMPL
//i.getBackwardMovement().set(false);
//
      CALL "BOOLEAN_OUTPUT_SET" (
           VALUE                    := FALSE,
           P                        := #_I.BACKWARD_MOVEMENT.P);

NETWORK
TITLE =IMPL
//handleActuatorMode();
      CALL "ACTUATOR_HANDLE_ACT_MODE" (
           P                        := #_THIS.P);

END_FUNCTION

FUNCTION "ACTUATOR_CONTROLLER_HAND" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _P_EXAMPLE_ACTUATOR_INTE : ANY ;	
  _P_EXAMPLE_CONTROL_DESK : ANY ;	
  _P_ACTUATOR : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR_CONTROLLER";	
  _EXAMPLE_ACTUATOR_INTERF : "EXAMPLE_ACTUATOR_INTERFA";	
  _EXAMPLE_CONTROL_DESK_IN : "EXAMPLE_CONTROL_DESK_INT";	
  _ACTUATOR : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
  _T1 : BOOL ;	
  _T2 : BOOL ;	
  _T3 : BOOL ;	
  _T4 : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =GET ANY POINTER

      L     #_THIS.P_EXAMPLE_ACTUATOR_INTER.DBNO; 
      T     #_DBNO; 
      L     #_THIS.P_EXAMPLE_ACTUATOR_INTER.START; 
      T     #_START; 
      L     #_THIS.P_EXAMPLE_ACTUATOR_INTER.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_EXAMPLE_ACTUATOR_INTE; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

      L     #_THIS.P_EXAMPLE_CONTROL_DESK_I.DBNO; 
      T     #_DBNO; 
      L     #_THIS.P_EXAMPLE_CONTROL_DESK_I.START; 
      T     #_START; 
      L     #_THIS.P_EXAMPLE_CONTROL_DESK_I.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_EXAMPLE_CONTROL_DESK; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

      L     #_THIS.ACTUATOR.P.DBNO; 
      T     #_DBNO; 
      L     #_THIS.ACTUATOR.P.START; 
      T     #_START; 
      L     #_THIS.ACTUATOR.P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_ACTUATOR; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_EXAMPLE_ACTUATOR_INTE,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_EXAMPLE_ACTUATOR_INTERF);

      CALL "BLKMOV" (
           SRCBLK                   := #_P_EXAMPLE_CONTROL_DESK,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_EXAMPLE_CONTROL_DESK_IN);

      CALL "BLKMOV" (
           SRCBLK                   := #_P_ACTUATOR,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_ACTUATOR);

NETWORK
TITLE =IMPL
//actuator.setInterlock(exampleActuatorInterface.getMovementLocked().get())
      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T1,
           P                        := #_EXAMPLE_ACTUATOR_INTERF.MOVEMENT_LOCKED.P);

      CALL "ACTUATOR_SET_INTERLOCK" (
           INTERLOCK                := #_T1,
           P                        := #_ACTUATOR.P);

NETWORK
TITLE =IMPL
//if (exampleControlDeskInterface.getForwardButton().get()) { 
//actuator.moveForward() }
      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T2,
           P                        := #_EXAMPLE_CONTROL_DESK_IN.FORWARD_BUTTON.P);

      A     #_T2; 
      JCN   ELS1; 

      CALL "ACTUATOR_MOVE_FORWARD" (
           P                        := #_ACTUATOR.P);

ELS1: CLR   ; 
NETWORK
TITLE =IMPL
//if (exampleControlDeskInterface.getBackwardButton().get()) { 
//actuator.moveBackward() }
      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T3,
           P                        := #_EXAMPLE_CONTROL_DESK_IN.BACKWARD_BUTTON.P);

      A     #_T3; 
      JCN   ELS2; 

      CALL "ACTUATOR_MOVE_BACKWARD" (
           P                        := #_ACTUATOR.P);

ELS2: CLR   ; 
NETWORK
TITLE =IMPL
//if (exampleControlDeskInterface.getStopButton().get()) { 
//actuator.stop() }
      CALL "BOOLEAN_INPUT_GET" (
           RET_VAL                  := #_T4,
           P                        := #_EXAMPLE_CONTROL_DESK_IN.STOP_BUTTON.P);

      A     #_T4; 
      JCN   ELS3; 

      CALL "ACTUATOR_STOP" (
           P                        := #_ACTUATOR.P);

ELS3: CLR   ; 
END_FUNCTION

FUNCTION "POINTERS" : VOID
TITLE =
VERSION : 0.1

BEGIN
NETWORK
TITLE =IMPL
//class ExampleActuatorInterface
      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#0,
           LENGTH                   := 58,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#8,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#18,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#28,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#38,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#48,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.P);

NETWORK
TITLE =IMPL
//class ExampleControlDeskInterface
      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#58,
           LENGTH                   := 38,
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#66,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#76,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.P);

      CALL "POINTER_CREATE" (
           DBNO                     := 1001,
           START                    := L#86,
           LENGTH                   := 10,
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.P);

NETWORK
TITLE =IMPL
//class ActuatorController
      CALL "POINTER_CREATE" (
           DBNO                     := 1002,
           START                    := L#0,
           LENGTH                   := 44,
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.P);

      CALL "POINTER_CREATE" (
           DBNO                     := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.P.DBNO,
           START                    := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.P.START,
           LENGTH                   := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.P.LENGTH,
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER);

      CALL "POINTER_CREATE" (
           DBNO                     := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.P.DBNO,
           START                    := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.P.START,
           LENGTH                   := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.P.LENGTH,
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.P_EXAMPLE_CONTROL_DESK_I);

      CALL "POINTER_CREATE" (
           DBNO                     := 1002,
           START                    := L#24,
           LENGTH                   := 20,
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.ACTUATOR.P);

      CALL "POINTER_CREATE" (
           DBNO                     := "CONTROLLERS".ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.DBNO,
           START                    := "CONTROLLERS".ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.START,
           LENGTH                   := "CONTROLLERS".ACTUATOR_CONTROLLER.P_EXAMPLE_ACTUATOR_INTER.LENGTH,
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.ACTUATOR.P_I);

END_FUNCTION

FUNCTION "INPUTS" : VOID
TITLE =
VERSION : 0.1

BEGIN
NETWORK
TITLE =IMPL

      A     I     10.0; 
      =     "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.VALUE; 
      A     I     10.1; 
      =     "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.VALUE; 
      A     I     10.2; 
      =     "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.VALUE; 
NETWORK
TITLE =IMPL

      A     I     12.0; 
      =     "INTERFACES".EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.VALUE; 
      A     I     12.1; 
      =     "INTERFACES".EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.VALUE; 
      A     I     12.2; 
      =     "INTERFACES".EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.VALUE; 

END_FUNCTION

FUNCTION "OUTPUTS" : VOID
TITLE =
VERSION : 0.1

BEGIN
NETWORK
TITLE =IMPL

      A     "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.FORWARD_MOVEMENT.VALUE; 
      =     Q     10.0; 
      A     "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.BACKWARD_MOVEMENT.VALUE; 
      =     Q     10.1; 

END_FUNCTION

FUNCTION "BOOLEAN_INPUT_EVALUATE" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "BOOLEAN_INPUT";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//onPositiveEdge = value && !oldValue && !onPositiveEdge
      A     #_THIS.VALUE; 
      AN    #_THIS.OLD_VALUE; 
      AN    #_THIS.ON_POSITIVE_EDGE; 
      =     #_THIS.ON_POSITIVE_EDGE; 
NETWORK
TITLE =IMPL
//onNegativeEdge = !value && oldValue && !onNegativeEdge 
      AN    #_THIS.VALUE; 
      A     #_THIS.OLD_VALUE; 
      AN    #_THIS.ON_NEGATIVE_EDGE; 
      =     #_THIS.ON_NEGATIVE_EDGE; 
NETWORK
TITLE =IMPL
//onValueVhanged = !value.equals(oldValue)
      A(    ; 
      AN    #_THIS.VALUE; 
      A     #_THIS.OLD_VALUE; 
      )     ; 
      O(    ; 
      A     #_THIS.VALUE; 
      AN    #_THIS.OLD_VALUE; 
      )     ; 
      =     #_THIS.ON_VALUE_CHANGED; 
NETWORK
TITLE =IMPL
//oldValue = value
      A     #_THIS.VALUE; 
      =     #_THIS.OLD_VALUE; 
NETWORK
TITLE =EXPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_P_THIS);

END_FUNCTION

FUNCTION "ACTUATOR_RUN" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 
NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL
//handleActuatorMOvement();
      CALL "ACTUATOR_HANDLE_ACT_MOVE" (
           P                        := #_THIS.P);

END_FUNCTION

FUNCTION "ACTUATOR_CONTROLLER_RUN" : VOID
TITLE =
VERSION : 0.1


VAR_IN_OUT
  P : "POINTER";	
END_VAR
VAR_TEMP
  _P_THIS : ANY ;	
  _RET_VAL : INT ;	
  _THIS : "ACTUATOR_CONTROLLER";	
  _DBNO : INT ;	
  _START : DINT ;	
  _LENGTH : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =GET ANY POINTER

      L     #P.DBNO; 
      T     #_DBNO; 
      L     #P.START; 
      T     #_START; 
      L     #P.LENGTH; 
      T     #_LENGTH; 

      L     P##_P_THIS; // load parameter type any
      LAR1  ; // load accu1 content to AR1
      L     W#16#1002; // load data format of parameter type any
      T     LW [AR1,P#0.0]; // set parameter #POINTE as S7 and data format by byte   
      L     #_DBNO; // get source DB NO.
      T     LW [AR1,P#4.0]; // put DB NO. to parameter #POINTER 
      L     #_START; // get start address
      SLD   3; // translate to byte address 
      OD    DW#16#84000000; // force the memory area as DB
      T     LD [AR1,P#6.0]; // put memory type(DB) to parameter #POINTER 
      L     #_LENGTH; // get repeatition factor
      T     LW [AR1,P#2.0]; 

NETWORK
TITLE =IMPORT THIS

      CALL "BLKMOV" (
           SRCBLK                   := #_P_THIS,
           RET_VAL                  := #_RET_VAL,
           DSTBLK                   := #_THIS);

NETWORK
TITLE =IMPL

      CALL "ACTUATOR_CONTROLLER_HAND" (
           P                        := #_THIS.P);

END_FUNCTION

ORGANIZATION_BLOCK OB 1
TITLE = "Main Program Sweep (Cycle)"
VERSION : 0.1


VAR_TEMP
  OB1_EV_CLASS : BYTE ;	//Bits 0-3 = 1 (Coming event), Bits 4-7 = 1 (Event class 1)
  OB1_SCAN_1 : BYTE ;	//1 (Cold restart scan 1 of OB 1), 3 (Scan 2-n of OB 1)
  OB1_PRIORITY : BYTE ;	//Priority of OB Execution
  OB1_OB_NUMBR : BYTE ;	//1 (Organization block 1, OB1)
  OB1_RESERVED_1 : BYTE ;	//Reserved for system
  OB1_RESERVED_2 : BYTE ;	//Reserved for system
  OB1_PREV_CYCLE : INT ;	//Cycle time of previous OB1 scan (milliseconds)
  OB1_MIN_CYCLE : INT ;	//Minimum cycle time of OB1 (milliseconds)
  OB1_MAX_CYCLE : INT ;	//Maximum cycle time of OB1 (milliseconds)
  OB1_DATE_TIME : DATE_AND_TIME ;	//Date and time OB1 started
  _T : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =POINTERS

      CALL "POINTERS" ;


NETWORK
TITLE =INPUTS

      CALL "INPUTS" ;


NETWORK
TITLE =IMPL
//@Inputs
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MIN_POSITION.P);
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MAX_POSITION.P);
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_ACTUATOR_INTERFA.MOVEMENT_LOCKED.P);
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.FORWARD_BUTTON.P);
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.BACKWARD_BUTTON.P);
      CALL "BOOLEAN_INPUT_EVALUATE" (
           P                        := "INTERFACES".EXAMPLE_CONTROL_DESK_INT.STOP_BUTTON.P);

NETWORK
TITLE =IMPL
//@Controllers
      CALL "ACTUATOR_CONTROLLER_RUN" (
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.P);

NETWORK
TITLE =IMPL
//@Components
      CALL "ACTUATOR_RUN" (
           P                        := "CONTROLLERS".ACTUATOR_CONTROLLER.ACTUATOR.P);

NETWORK
TITLE =OUTPUTS

      CALL "OUTPUTS" ;


END_ORGANIZATION_BLOCK

